/* Imports
---------------------------------------------------------------------------------------------------- */
// Variables
@use '../../../scss/partials/variables' as v;

// Mixins
@use '../../../scss/partials/mixins' as m;

// Typography
@use '../../../scss/partials/typography' as t;

// Icons
@use '../../../scss/partials/icons' as i;



/* Search filters
---------------------------------------------------------------------------------------------------- */
/* Filter button
-------------------------------------------------- */
.search .filterButton {
	@include m.reset;
	display: flex;
	gap: v.$gap_1;
	align-items: center;
	margin-left: auto;
	cursor: pointer;

	.icon {
		@include i.icon($style: 'thick', $size: 'm', $color: 'primary');
	}

	.text {
		@include t.text_m;
		// Adjust alignment slightly (this looks better than flex's vertical center alignment)
		margin-top: -1px;
		font-weight: v.$font_weight_semiBold;
		color: v.$color_primary;
	}

	@include m.hover {
		.text,
		.icon {
			color: v.$color_primary_light_1;
		}

		.text {
			text-decoration: underline;
		}
	}
}


/* Filters
-------------------------------------------------- */
.search .filters {
	display: flex;
	flex-basis: 100%;
	flex-wrap: wrap;
	gap: v.$gap_4;
	padding-top: v.$gap_4;
	padding-right: v.$gap_4;
	padding-bottom: v.$gap_5;
	padding-left: v.$gap_4;
	background: v.$color_white;
	border-radius: v.$border_radius_s;
	box-shadow: v.$shadow_m;


	/* Top area (title and close button)
	-------------------------------------------------- */
	.top {
		position: relative;
		flex-basis: 100%;
		padding-right: v.$gap_5;

		.title {
			@include t.text_h5;
		}

		.closeButton {
			@include m.reset;
			position: absolute;
			top: -#{v.$gap_1_5};
			right: -#{v.$gap_1_5};
			display: flex;
			align-items: center;
			justify-content: center;
			width: v.$gap_5;
			height: v.$gap_5;
			margin-left: auto;
			border-radius: 999px;
			cursor: pointer;
			transition: background-color v.$transition_fast linear;

			.icon {
				@include i.icon($style: 'thick', $size: 'm', $color: 'black');
			}

			@include m.hover {
				background: v.$color_grey_light_4;
			}

			&:active {
				background: v.$color_grey_light_3;
			}
		}
	}


	/* Form
	-------------------------------------------------- */
	form {
		@include m.reset;
		display: flex;
		flex-basis: 100%;
		flex-wrap: wrap;
		row-gap: v.$gap_4;
		column-gap: v.$gap_6;

		.filter {
			display: flex;
			// This is a simply little formula to account for the flex gap
			// 25% - the gap size + (the gap size / the total columns per row)
			flex-basis: calc(25% - v.$gap_6 + (v.$gap_6 / 4));
			flex-wrap: wrap;
			gap: v.$gap_1_5;

			.label {
				flex-basis: 100%;
				@include t.text_m;
				color: v.$color_grey_light_1;
			}

			.fields {
				display: flex;
				flex-basis: 100%;
				flex-wrap: nowrap;
				gap: v.$gap_2;

				input,
				select {
					@include m.reset;
					@include t.text_s;
					width: 100%;
					height: v.$gap_6;
					padding-right: v.$gap_2;
					padding-left: v.$gap_2;
					background: v.$color_white;
					border: 1px solid v.$color_grey_light_2;
					border-radius: v.$border_radius_s;
					font-family: v.$font_family_primary;
					font-weight: v.$font_weight_regular;
					color: v.$color_black;
					transition: border-color v.$transition_fast linear;

					// Disable typography alignment
					&::before,
					&::after {
						content: none;
					}

					&::placeholder {
						color: v.$color_grey_light_1;
					}

					&:focus {
						border-color: v.$color_grey_light_1;
					}
				}

				// Hide number "tickers" (these come from the browser)
				input::-webkit-outer-spin-button,
				input::-webkit-inner-spin-button {
					margin: 0;
					-webkit-appearance: none;
				}

				input[type='number'] {
					-moz-appearance: textfield;
				}

				// Select boxes
				.selectContainer {
					position: relative;
					width: 100%;

					select {
						// Manual text alignment
						padding-top: 14px;

						// Don't manually align in firefox
						@-moz-document url-prefix() {
							padding-top: 0;
						}

						padding-right: v.$gap_4_5;
						vertical-align: top;

						// Placeholder
						&:has(option[value='']:checked) {
							color: v.$color_grey_light_1;
						}
					}

					.icon {
						@include i.icon($style: 'normal', $size: 'm', $color: 'grey_light_1');
						position: absolute;
						top: 50%;
						right: 10px;
						transform: translateY(-50%);
						pointer-events: none;
					}
				}
			}
		}
	}


	/* Clear filters button
	-------------------------------------------------- */
	.clearFiltersButton {
		@include m.reset;
		color: v.$color_primary;
		cursor: pointer;

		.text {
			@include t.text_s;
			font-weight: v.$font_weight_semiBold;
		}

		@include m.hover {
			text-decoration: underline;
		}
	}


	/* Responsive
	-------------------------------------------------- */
	@media (max-width: v.$breakpoint_l) {
		padding-top: v.$gap_3;
		padding-right: v.$gap_3;
		padding-bottom: v.$gap_4;
		padding-left: v.$gap_3;

		form {
			gap: v.$gap_4;

			.filter {
				// This is a simply little formula to account for the flex gap
				// 50% - the gap size + (the gap size / the total columns per row)
				flex-basis: calc(50% - v.$gap_4 + (v.$gap_4 / 2));
			}
		}
	}

	@media (max-width: v.$breakpoint_s) {
		form {
			gap: v.$gap_3;

			.filter {
				flex-basis: 100%;
			}
		}
	}
}
